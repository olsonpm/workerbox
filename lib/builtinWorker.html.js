// built from the ./server/dist/index.html file during npm run build
const builtinWorker = atob(`<a href="https://workerbox.net">info?</a>.

<script>
  function workerScript () {
(()=>{var generateUniqueId=()=>(globalThis.incrementor=(globalThis.incrementor||0)+1,globalThis.incrementor+"_"+Array(20).fill("!@#$%^&*()_+-=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz").map((function(e){return e[Math.floor(Math.random()*e.length)]})).join("")),generateUniqueId_default=generateUniqueId;function createCallbackStore(){const e={};return{store:e,add:r=>{const t=generateUniqueId_default();return e[t]=r,t},get:r=>e[r]}}var createCallbackStore_default=createCallbackStore,DoubleIndexedKV=class{constructor(){this.keyToValue=new Map,this.valueToKey=new Map}set(e,r){this.keyToValue.set(e,r),this.valueToKey.set(r,e)}getByKey(e){return this.keyToValue.get(e)}getByValue(e){return this.valueToKey.get(e)}clear(){this.keyToValue.clear(),this.valueToKey.clear()}},Registry=class{constructor(e){this.generateIdentifier=e,this.kv=new DoubleIndexedKV}register(e,r){this.kv.getByValue(e)||(r||(r=this.generateIdentifier(e)),this.kv.set(r,e))}clear(){this.kv.clear()}getIdentifier(e){return this.kv.getByValue(e)}getValue(e){return this.kv.getByKey(e)}},ClassRegistry=class extends Registry{constructor(){super((e=>e.name)),this.classToAllowedProps=new Map}register(e,r){"object"==typeof r?(r.allowProps&&this.classToAllowedProps.set(e,r.allowProps),super.register(e,r.identifier)):super.register(e,r)}getAllowedProps(e){return this.classToAllowedProps.get(e)}};function valuesOfObj(e){if("values"in Object)return Object.values(e);const r=[];for(const t in e)e.hasOwnProperty(t)&&r.push(e[t]);return r}function find(e,r){const t=valuesOfObj(e);if("find"in t)return t.find(r);const s=t;for(let e=0;e<s.length;e++){const t=s[e];if(r(t))return t}}function forEach(e,r){Object.entries(e).forEach((([e,t])=>r(t,e)))}function includes(e,r){return-1!==e.indexOf(r)}function findArr(e,r){for(let t=0;t<e.length;t++){const s=e[t];if(r(s))return s}}var CustomTransformerRegistry=class{constructor(){this.transfomers={}}register(e){this.transfomers[e.name]=e}findApplicable(e){return find(this.transfomers,(r=>r.isApplicable(e)))}findByName(e){return this.transfomers[e]}},getType=e=>Object.prototype.toString.call(e).slice(8,-1),isUndefined=e=>void 0===e,isNull=e=>null===e,isPlainObject=e=>"object"==typeof e&&null!==e&&(e!==Object.prototype&&(null===Object.getPrototypeOf(e)||Object.getPrototypeOf(e)===Object.prototype)),isEmptyObject=e=>isPlainObject(e)&&0===Object.keys(e).length,isArray=e=>Array.isArray(e),isString=e=>"string"==typeof e,isNumber=e=>"number"==typeof e&&!isNaN(e),isBoolean=e=>"boolean"==typeof e,isRegExp=e=>e instanceof RegExp,isMap=e=>e instanceof Map,isSet=e=>e instanceof Set,isSymbol=e=>"Symbol"===getType(e),isDate=e=>e instanceof Date&&!isNaN(e.valueOf()),isError=e=>e instanceof Error,isNaNValue=e=>"number"==typeof e&&isNaN(e),isPrimitive=e=>isBoolean(e)||isNull(e)||isUndefined(e)||isNumber(e)||isString(e)||isSymbol(e),isBigint=e=>"bigint"==typeof e,isInfinite=e=>e===1/0||e===-1/0,isTypedArray=e=>ArrayBuffer.isView(e)&&!(e instanceof DataView),isURL=e=>e instanceof URL,escapeKey=e=>e.replace(/\./g,"\\."),stringifyPath=e=>e.map(String).map(escapeKey).join("."),parsePath=e=>{const r=[];let t="";for(let s=0;s<e.length;s++){let n=e.charAt(s);if("\\"===n&&"."===e.charAt(s+1)){t+=".",s++;continue}"."===n?(r.push(t),t=""):t+=n}const s=t;return r.push(s),r};function simpleTransformation(e,r,t,s){return{isApplicable:e,annotation:r,transform:t,untransform:s}}var simpleRules=[simpleTransformation(isUndefined,"undefined",(()=>null),(()=>{})),simpleTransformation(isBigint,"bigint",(e=>e.toString()),(e=>"undefined"!=typeof BigInt?BigInt(e):(console.error("Please add a BigInt polyfill."),e))),simpleTransformation(isDate,"Date",(e=>e.toISOString()),(e=>new Date(e))),simpleTransformation(isError,"Error",((e,r)=>{const t={name:e.name,message:e.message};return r.allowedErrorProps.forEach((r=>{t[r]=e[r]})),t}),((e,r)=>{const t=new Error(e.message);return t.name=e.name,t.stack=e.stack,r.allowedErrorProps.forEach((r=>{t[r]=e[r]})),t})),simpleTransformation(isRegExp,"regexp",(e=>""+e),(e=>{const r=e.slice(1,e.lastIndexOf("/")),t=e.slice(e.lastIndexOf("/")+1);return new RegExp(r,t)})),simpleTransformation(isSet,"set",(e=>[...e.values()]),(e=>new Set(e))),simpleTransformation(isMap,"map",(e=>[...e.entries()]),(e=>new Map(e))),simpleTransformation((e=>isNaNValue(e)||isInfinite(e)),"number",(e=>isNaNValue(e)?"NaN":e>0?"Infinity":"-Infinity"),Number),simpleTransformation((e=>0===e&&1/e==-1/0),"number",(()=>"-0"),Number),simpleTransformation(isURL,"URL",(e=>e.toString()),(e=>new URL(e)))];function compositeTransformation(e,r,t,s){return{isApplicable:e,annotation:r,transform:t,untransform:s}}var symbolRule=compositeTransformation(((e,r)=>{if(isSymbol(e)){return!!r.symbolRegistry.getIdentifier(e)}return!1}),((e,r)=>["symbol",r.symbolRegistry.getIdentifier(e)]),(e=>e.description),((e,r,t)=>{const s=t.symbolRegistry.getValue(r[1]);if(!s)throw new Error("Trying to deserialize unknown symbol");return s})),constructorToName=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,Uint8ClampedArray].reduce(((e,r)=>(e[r.name]=r,e)),{}),typedArrayRule=compositeTransformation(isTypedArray,(e=>["typed-array",e.constructor.name]),(e=>[...e]),((e,r)=>{const t=constructorToName[r[1]];if(!t)throw new Error("Trying to deserialize unknown typed array");return new t(e)}));function isInstanceOfRegisteredClass(e,r){if(e?.constructor){return!!r.classRegistry.getIdentifier(e.constructor)}return!1}var classRule=compositeTransformation(isInstanceOfRegisteredClass,((e,r)=>["class",r.classRegistry.getIdentifier(e.constructor)]),((e,r)=>{const t=r.classRegistry.getAllowedProps(e.constructor);if(!t)return{...e};const s={};return t.forEach((r=>{s[r]=e[r]})),s}),((e,r,t)=>{const s=t.classRegistry.getValue(r[1]);if(!s)throw new Error(`Trying to deserialize unknown class '${r[1]}' - check https://github.com/blitz-js/superjson/issues/116#issuecomment-773996564`);return Object.assign(Object.create(s.prototype),e)})),customRule=compositeTransformation(((e,r)=>!!r.customTransformerRegistry.findApplicable(e)),((e,r)=>["custom",r.customTransformerRegistry.findApplicable(e).name]),((e,r)=>r.customTransformerRegistry.findApplicable(e).serialize(e)),((e,r,t)=>{const s=t.customTransformerRegistry.findByName(r[1]);if(!s)throw new Error("Trying to deserialize unknown custom value");return s.deserialize(e)})),compositeRules=[classRule,symbolRule,customRule,typedArrayRule],transformValue=(e,r)=>{const t=findArr(compositeRules,(t=>t.isApplicable(e,r)));if(t)return{value:t.transform(e,r),type:t.annotation(e,r)};const s=findArr(simpleRules,(t=>t.isApplicable(e,r)));return s?{value:s.transform(e,r),type:s.annotation}:void 0},simpleRulesByAnnotation={};simpleRules.forEach((e=>{simpleRulesByAnnotation[e.annotation]=e}));var untransformValue=(e,r,t)=>{if(!isArray(r)){const s=simpleRulesByAnnotation[r];if(!s)throw new Error("Unknown transformation: "+r);return s.untransform(e,t)}switch(r[0]){case"symbol":return symbolRule.untransform(e,r,t);case"class":return classRule.untransform(e,r,t);case"custom":return customRule.untransform(e,r,t);case"typed-array":return typedArrayRule.untransform(e,r,t);default:throw new Error("Unknown transformation: "+r)}},getNthKey=(e,r)=>{if(r>e.size)throw new Error("index out of bounds");const t=e.keys();for(;r>0;)t.next(),r--;return t.next().value};function validatePath(e){if(includes(e,"__proto__"))throw new Error("__proto__ is not allowed as a property");if(includes(e,"prototype"))throw new Error("prototype is not allowed as a property");if(includes(e,"constructor"))throw new Error("constructor is not allowed as a property")}var getDeep=(e,r)=>{validatePath(r);for(let t=0;t<r.length;t++){const s=r[t];if(isSet(e))e=getNthKey(e,+s);else if(isMap(e)){const n=+s,a=0==+r[++t]?"key":"value",i=getNthKey(e,n);switch(a){case"key":e=i;break;case"value":e=e.get(i)}}else e=e[s]}return e},setDeep=(e,r,t)=>{if(validatePath(r),0===r.length)return t(e);let s=e;for(let e=0;e<r.length-1;e++){const t=r[e];if(isArray(s)){s=s[+t]}else if(isPlainObject(s))s=s[t];else if(isSet(s)){s=getNthKey(s,+t)}else if(isMap(s)){if(e===r.length-2)break;const n=+t,a=0==+r[++e]?"key":"value",i=getNthKey(s,n);switch(a){case"key":s=i;break;case"value":s=s.get(i)}}}const n=r[r.length-1];if(isArray(s)?s[+n]=t(s[+n]):isPlainObject(s)&&(s[n]=t(s[n])),isSet(s)){const e=getNthKey(s,+n),r=t(e);e!==r&&(s.delete(e),s.add(r))}if(isMap(s)){const e=+r[r.length-2],a=getNthKey(s,e);switch(0==+n?"key":"value"){case"key":{const e=t(a);s.set(e,s.get(a)),e!==a&&s.delete(a);break}case"value":s.set(a,t(s.get(a)))}}return e};function traverse(e,r,t=[]){if(!e)return;if(!isArray(e))return void forEach(e,((e,s)=>traverse(e,r,[...t,...parsePath(s)])));const[s,n]=e;n&&forEach(n,((e,s)=>{traverse(e,r,[...t,...parsePath(s)])})),r(s,t)}function applyValueAnnotations(e,r,t){return traverse(r,((r,s)=>{e=setDeep(e,s,(e=>untransformValue(e,r,t)))})),e}function applyReferentialEqualityAnnotations(e,r){function apply(r,t){const s=getDeep(e,parsePath(t));r.map(parsePath).forEach((r=>{e=setDeep(e,r,(()=>s))}))}if(isArray(r)){const[t,s]=r;t.forEach((r=>{e=setDeep(e,parsePath(r),(()=>e))})),s&&forEach(s,apply)}else forEach(r,apply);return e}var isDeep=(e,r)=>isPlainObject(e)||isArray(e)||isMap(e)||isSet(e)||isInstanceOfRegisteredClass(e,r);function addIdentity(e,r,t){const s=t.get(e);s?s.push(r):t.set(e,[r])}function generateReferentialEqualityAnnotations(e,r){const t={};let s;return e.forEach((e=>{if(e.length<=1)return;r||(e=e.map((e=>e.map(String))).sort(((e,r)=>e.length-r.length)));const[n,...a]=e;0===n.length?s=a.map(stringifyPath):t[stringifyPath(n)]=a.map(stringifyPath)})),s?isEmptyObject(t)?[s]:[s,t]:isEmptyObject(t)?void 0:t}var walker=(e,r,t,s,n=[],a=[],i=new Map)=>{const o=isPrimitive(e);if(!o){addIdentity(e,n,r);const t=i.get(e);if(t)return s?{transformedValue:null}:t}if(!isDeep(e,t)){const r=transformValue(e,t),s=r?{transformedValue:r.value,annotations:[r.type]}:{transformedValue:e};return o||i.set(e,s),s}if(includes(a,e))return{transformedValue:null};const l=transformValue(e,t),u=l?.value??e,c=isArray(u)?[]:{},p={};forEach(u,((o,l)=>{if("__proto__"===l||"constructor"===l||"prototype"===l)throw new Error(`Detected property ${l}. This is a prototype pollution risk, please remove it from your object.`);const u=walker(o,r,t,s,[...n,l],[...a,e],i);c[l]=u.transformedValue,isArray(u.annotations)?p[l]=u.annotations:isPlainObject(u.annotations)&&forEach(u.annotations,((e,r)=>{p[escapeKey(l)+"."+r]=e}))}));const f=isEmptyObject(p)?{transformedValue:c,annotations:l?[l.type]:void 0}:{transformedValue:c,annotations:l?[l.type,p]:p};return o||i.set(e,f),f};function getType2(e){return Object.prototype.toString.call(e).slice(8,-1)}function isArray2(e){return"Array"===getType2(e)}function isPlainObject2(e){if("Object"!==getType2(e))return!1;const r=Object.getPrototypeOf(e);return!!r&&r.constructor===Object&&r===Object.prototype}function isNull2(e){return"Null"===getType2(e)}function isOneOf(e,r,t,s,n){return a=>e(a)||r(a)||!!t&&t(a)||!!s&&s(a)||!!n&&n(a)}function isUndefined2(e){return"Undefined"===getType2(e)}var isNullOrUndefined=isOneOf(isNull2,isUndefined2);function assignProp(e,r,t,s,n){const a={}.propertyIsEnumerable.call(s,r)?"enumerable":"nonenumerable";"enumerable"===a&&(e[r]=t),n&&"nonenumerable"===a&&Object.defineProperty(e,r,{value:t,enumerable:!1,writable:!0,configurable:!0})}function copy(e,r={}){if(isArray2(e))return e.map((e=>copy(e,r)));if(!isPlainObject2(e))return e;return[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)].reduce(((t,s)=>{if(isArray2(r.props)&&!r.props.includes(s))return t;return assignProp(t,s,copy(e[s],r),e,r.nonenumerable),t}),{})}var SuperJSON=class{constructor({dedupe:e=!1}={}){this.classRegistry=new ClassRegistry,this.symbolRegistry=new Registry((e=>e.description??"")),this.customTransformerRegistry=new CustomTransformerRegistry,this.allowedErrorProps=[],this.dedupe=e}serialize(e){const r=new Map,t=walker(e,r,this,this.dedupe),s={json:t.transformedValue};t.annotations&&(s.meta={...s.meta,values:t.annotations});const n=generateReferentialEqualityAnnotations(r,this.dedupe);return n&&(s.meta={...s.meta,referentialEqualities:n}),s}deserialize(e){const{json:r,meta:t}=e;let s=copy(r);return t?.values&&(s=applyValueAnnotations(s,t.values,this)),t?.referentialEqualities&&(s=applyReferentialEqualityAnnotations(s,t.referentialEqualities)),s}stringify(e){return JSON.stringify(this.serialize(e))}parse(e){return this.deserialize(JSON.parse(e))}registerClass(e,r){this.classRegistry.register(e,r)}registerSymbol(e,r){this.symbolRegistry.register(e,r)}registerCustom(e,r){this.customTransformerRegistry.register({name:r,...e})}allowErrorProps(...e){this.allowedErrorProps.push(...e)}};SuperJSON.defaultInstance=new SuperJSON,SuperJSON.serialize=SuperJSON.defaultInstance.serialize.bind(SuperJSON.defaultInstance),SuperJSON.deserialize=SuperJSON.defaultInstance.deserialize.bind(SuperJSON.defaultInstance),SuperJSON.stringify=SuperJSON.defaultInstance.stringify.bind(SuperJSON.defaultInstance),SuperJSON.parse=SuperJSON.defaultInstance.parse.bind(SuperJSON.defaultInstance),SuperJSON.registerClass=SuperJSON.defaultInstance.registerClass.bind(SuperJSON.defaultInstance),SuperJSON.registerSymbol=SuperJSON.defaultInstance.registerSymbol.bind(SuperJSON.defaultInstance),SuperJSON.registerCustom=SuperJSON.defaultInstance.registerCustom.bind(SuperJSON.defaultInstance),SuperJSON.allowErrorProps=SuperJSON.defaultInstance.allowErrorProps.bind(SuperJSON.defaultInstance);var serialize=SuperJSON.serialize,deserialize=SuperJSON.deserialize,stringify=SuperJSON.stringify,parse=SuperJSON.parse,registerClass=SuperJSON.registerClass,registerCustom=SuperJSON.registerCustom,registerSymbol=SuperJSON.registerSymbol,allowErrorProps=SuperJSON.allowErrorProps;function createSuperJSON(e,r){const t=new SuperJSON;return t.registerCustom({isApplicable:e=>"function"==typeof e,serialize:e,deserialize:e=>(...s)=>r(e,t.stringify(s))},"callback"),t}var createSuperJSON_default=createSuperJSON;self.addEventListener("message",(async event=>{const port=event.ports[0],callbacks=createCallbackStore_default(),run=(e,r)=>new Promise((t=>{port.postMessage(["callback",{id:e,args:r,resolve:callbacks.add(t)}])})),superjson=createSuperJSON_default(callbacks.add,run);port.onmessage=async event2=>{const[action,message]=event2.data,{id:id,errorId:errorId,code:code,scope:scope,args:args,resolve:resolve,reject:reject}=message;if("execute"===action){const parsedScope=superjson.parse(scope);try{globalThis.workerboxScope=parsedScope,eval?.(code),port.postMessage(["return",{id:id,args:superjson.stringify([void 0])}])}catch(e){port.postMessage(["error",{id:errorId,args:superjson.stringify([e])}])}}if("callback"===action){const e=superjson.parse(args),r=callbacks.get(id);if(!r)return;try{const t=await r(...e);port.postMessage(["return",{id:resolve,args:superjson.stringify([t])}])}catch(e){port.postMessage(["error",{id:reject,args:superjson.stringify([e])}])}}}}))})();
  }

  self.addEventListener('message', async (event) => {
    const code = workerScript.toString().split('\n').slice(1, -1).join('\n');
    const blob = new Blob([code], {type: 'application/javascript'})
    const worker = new Worker(URL.createObjectURL(blob))

    worker.postMessage('OK', event.ports);
  });
</script>
`); export default builtinWorker;